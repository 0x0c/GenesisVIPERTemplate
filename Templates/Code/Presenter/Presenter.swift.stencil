//
//  {{ module_name }}Presenter
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import Combine
import Foundation

enum {{ module_name }}PresenterState {
    // TODO: Add any states for view
    case initial
}

@MainActor
protocol {{ module_name }}PresenterInput: AnyObject {
    // MARK: View Life-Cycle methods

    func viewDidLoad()

    // MARK: Other methods called from View
}

@MainActor
final class {{ module_name }}Presenter {
    // MARK: VIPER properties
    weak var view: {{ module_name }}ViewInput!
    var interactor: {{ module_name }}InteractorInput!
    var router: {{ module_name }}RouterInput!

    @Published private var state: {{ module_name }}PresenterState = .initial
    private var cancellable = Set<AnyCancellable>()

    init(view: {{ module_name }}ViewInput, interactor: {{ module_name }}InteractorInput, router: {{ module_name }}RouterInput) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }
}

extension {{ module_name }}Presenter: {{ module_name }}PresenterInput {
    func viewDidLoad() {
        // TODO: Implement if needed
        $state
            .sink { [weak self] newState in
                guard let self else {
                    return
                }
                view.updateState(newState)
            }.store(in: &cancellable)
    }
}

